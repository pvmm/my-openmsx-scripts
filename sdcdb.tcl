# SDCDB connector - Version 1.0
#
# Copyright 2025 Pedro de Medeiros all rights reserved
#
# SDCDB connector uses SDCC integrated debugger to create breakpoints and much more.
#
# The main difference between SDCDB connector's breakpoints and the built-in OpenMSX
# breakpoints is the C code integration:
# [ ] allow users to create breakpoints on C code:
#     > sdcdb::break main.c:55
# [ ] print contents of a C variable:
#     > sdcdb::print status
# [ ] print type of a C variable:
#     > sdcdb::ptype status
# [ ] step to next C instruction:
#     > sdcdb::next
# [ ] list current C line:
#     > sdcdb::list.
# [ ] list C source code at line 100:
#     > sdcdb::list main.c:100
# 
# Caveat: you need the sdcdb debugger and sz80 simulator (µCsim) from the SDCC compiler
# collection to run SDCDB connector. Some package managers rename sz80 to ucsim_z80, so
# sdcdb won't work without renaming it or creating a symlink to sz80.
#
# Commands that SDCDB connector recognizes directly. You may call them with sdcdb::[COMMAND] [ARGS...]:
#
# select [PATH]
#       - Set path to the SDCDB binary.
# connect [src DIRECTORY1:DIRECTORY2:...] [NAME]
#       - Invoke SDCDB and connect to it. You may specify paths to the source files
#         that SDCDB uses. NAME points to the IHX (NAME.ihx) and CDB (NAME.cdb) files
#         generated by SDCC (compile your code using SDCC -debug parameter).
# disconnect
#       - close connection to SDCDB, killing the process.
# break [LINE | FILE:LINE | FILE:FUNCTION | FUNCTION | *<address> ]
#       - creates breakpoint
# clear [LINE | FILE:LINE | FILE:FUNCTION | FUNCTION | *<address> ]
#       - deletes breakpoint
# list [LINE | FILE:LINE | FILE:FUNCTION | FUNCTION | *<address> ]
#       - list C source code or disassembly at <address>
# list.
#       - list C source code at current program counter
# ucsim [COMMAND]
#       - invoke µCsim command directly
#
# For more information about SDCDB: https://sourceforge.net/p/sdcc/wiki/Home/
# For more information about µCsim: https://www.ucsim.hu/

namespace eval sdcdb {

variable pipe    0
variable path    sdcdb
variable message ""
variable context none

proc output {args} {
    set chan stdout
    if {[llength $args] == 1} {
        puts $chan [lindex $args 0]
    } else {
        puts [lindex $args 0] $chan [lindex $args 1]
    }
    flush $chan
}

proc debug {args} {
    set chan stderr
    if {[llength $args] == 1} {
        puts $chan [lindex $args 0]
    } else {
        puts [lindex $args 0] $chan [lindex $args 1]
    }
    flush $chan
}

proc select {p} {
    variable path
    if {[is_in_path $p] eq 0} {
        if {![file isfile $p]} {
            error "SDCDB not a file or file not found"
        }
    }
    set path $p
}

proc is_in_path {program} {
    foreach dir [split $::env(PATH) ":"] {
        if {[file executable [file join $dir $program]]} {
            return 1
        }
    }
    return 0
}

proc connect {} {
    variable path
    select $path
    # Non-blocking comunication reading
    output "Opening SDCDB process..."
    variable pipe
    #set pipe [open |[list stdbuf -oL sdcdb] [list RDWR NOCTTY NONBLOCK]] ;# r+
    #set pipe [open |[list $path 2>&1] [list RDWR]] ;# r+
    set pipe [open |[list $path] [list RDWR NONBLOCK]]
    fconfigure $pipe -blocking 0 -buffering line
    fileevent $pipe readable [list sdcdb::handle_output]
}

proc handle_output {} {
    variable pipe
    if {[eof $pipe]} {
        output "SDCDB process died."
        fileevent $pipe readable {}
        close $pipe
	variable pipe 0
        return
    }
    set output [read $pipe]
    if {$output ne {}} {
        debug -nonewline "output: $output"
    }
    variable context
    if {$context eq break} {
        output "added breakpoint at "
    }
}

proc send_command {cmd} {
    debug "send_command($cmd)"
    variable pipe
    if {$pipe eq 0} {
        error "SDCDB connection not found, call connect first."
    }
    if {[catch {puts $pipe $cmd; flush $pipe} err]} {
        output "Error sending command: $err"
    }
}

proc disconnect {} {
    variable pipe
    if {$pipe eq 0} {
        error "SDCDB connection not found, call connect first."
    }
    fileevent $pipe readable {}
    close $pipe
    output "SDCDB process closed."
    set pipe 0
}

proc break {arg} {
    variable context break
    send_command [list break $arg]
}

proc list {arg} {
    variable context list
    send_command [list list $arg]
}

proc test {} {
    ;#ucsim_z80
    ;#/home/pedro/Projects/openmsx/my-openmsx-scripts/teste
    variable path
    sdcdb::select $path
    sdcdb::connect
}

namespace export sdcdb

}

#namespace import sdcdb::*
